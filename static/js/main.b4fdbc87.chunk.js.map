{"version":3,"sources":["components/Header.js","components/Jumbotron.js","components/Card.js","components/Wrapper.js","components/ModalComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","score","topScore","Jumbotron","Card","src","image","alt","name","onClick","handleCharacterClick","Wrapper","children","ModalComponent","Modal","show","onHide","handleModalClose","animation","closeButton","Title","title","Body","body","Footer","Button","variant","App","state","clicked","characters","modalTitle","modalBody","handleWin","setState","handleModalShow","handleLoss","id","includes","newArray","concat","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","element","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4fdbc87.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props){\r\n\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h4>Clicky Game</h4>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h5>Click an image to start playing</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h4 className=\"score\">Score: {props.score} || Top Score: {props.topScore} </h4>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Jumbotron(){\r\n    return(\r\n        <div className=\"jumbotron jumbotron-fluid text-center\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Clicky Game</h1>\r\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"../style.css\";\r\n\r\nfunction Card(props) {\r\n\r\n    return(\r\n        <div className=\"card\">\r\n            <img className=\"card-img\" \r\n                src={props.image}\r\n                alt={props.name}\r\n                onClick={props.handleCharacterClick}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"../style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n  }\r\n  \r\n  export default Wrapper;","import React from \"react\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\n\r\nfunction ModalComponent(props){\r\n\r\n    return(\r\n        <>\r\n            <Modal show={props.show} onHide={props.handleModalClose} animation={false}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>{props.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{props.body}</Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.handleModalClose}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModalComponent;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Jumbotron from './components/Jumbotron';\nimport Card from './components/Card';\nimport Wrapper from './components/Wrapper';\nimport characters from './characters.json';\nimport ModalComponent from './components/ModalComponent';\n\nclass App extends React.Component {\n\n  // Initial state\n  state ={\n    score: 0,\n    topScore: 0,\n    clicked: [],\n    characters: characters, \n    modalTitle: \"\",\n    modalBody: \"\",\n    show: false\n  }\n\n  // Function to shuffle array\n  shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    this.setState({characters: array});\n  }\n\n  // Function to handle when a user has clicked all images correctly\n  handleWin = () =>{\n    this.setState({\n      score: 0,\n      clicked: []\n    })\n    this.handleModalShow(\"YOU WIN!\", \"CONGRATS\");\n  }\n\n  // Function to handle when a user clicked twice on an element\n  handleLoss =() =>{\n    this.setState({\n      score: 0,\n      clicked: []\n    });\n    this.handleModalShow(\"You lost\", \"Better luck next time\");\n  }\n\n  // Function to handle modal show\n  handleModalShow = (title, body) =>{\n    this.setState({\n      modalTitle : title,\n      modalBody: body,\n      show: true\n    });\n  }\n\n  // Function to handle modal close\n  handleModalClose = () =>{\n    this.setState({show: false});\n  }\n\n  // Event to handle if an image has been clicked twice\n  handleCharacterClick = (id) => {\n    if(!this.state.clicked.includes(id)){\n      this.setState(state => {\n        const newArray = state.clicked.concat(id);\n        if(this.state.score === this.state.topScore){\n          this.setState({topScore: this.state.topScore +1});\n          if(this.state.score === 11){\n            this.handleWin();\n          }\n          this.shuffle(this.state.characters);\n        }\n        return{clicked: newArray,\n               score: this.state.score + 1\n        }\n      });\n    }else{\n      this.handleLoss();\n    }\n  }\n\n  render() {\n    return(\n    <div>\n      < Header score={this.state.score} topScore={this.state.topScore}/>\n      < Jumbotron/>\n      < ModalComponent title={this.state.modalTitle} \n                  body={this.state.modalBody} \n                  show={this.state.show} \n                  handleModalClose={() => this.handleModalClose()}/>\n        < Wrapper>\n        {\n          // Iterating the character list to display\n          characters.map( element => \n            < Card image={element.image} \n                    name={element.name} \n                    handleCharacterClick={() => this.handleCharacterClick(element.id)}/>\n          )\n        }\n      </ Wrapper>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}